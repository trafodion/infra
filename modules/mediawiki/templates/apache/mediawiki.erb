#####################################################################
###  THIS FILE IS MANAGED BY PUPPETlive On
### puppet:///files/apache/sites/labconsole.wikimedia.org
#####################################################################
# vim: filetype=apache

<VirtualHost *:80>
        ServerAdmin <%= scope.lookupvar("mediawiki::server_admin") %>
        ServerName <%= scope.lookupvar("mediawiki::site_hostname") %>
        ServerAlias <%= scope.lookupvar("mediawiki::site_hostname_alias") %>

        # mitigate XSS
        Header unset ETag
        Header set X-Frame-Options: sameorigin
        Header set X-XSS-Protection: "1; mode=block"
        Header set X-Content-Type-Options: nosniff
        Header set X-WebKit-CSP: "default-src 'self'"
        Header set X-Permitted-Cross-Domain-Policies: "master-only"

        DocumentRoot /var/www
        <Directory />
                Options FollowSymLinks
                AllowOverride None
        </Directory>
        <Directory /var/www/>
                Options Indexes FollowSymLinks MultiViews
                AllowOverride None
                Order allow,deny
                allow from all
        </Directory>

        RewriteEngine on
        RewriteCond %{SERVER_PORT} !^443$
        RewriteRule ^/(.*)$ https://<%= scope.lookupvar("mediawiki::site_hostname") %>/$1 [L,R]

        # Disable unused HTTP methods
        RewriteCond %{REQUEST_METHOD} !^(GET|POST|HEAD)
        RewriteRule .* - [R=405,L]

        ErrorLog /var/log/apache2/mediawiki-error.log

        # Possible values include: debug, info, notice, warn, error, crit,
        # alert, emerg.
        LogLevel warn

        CustomLog /var/log/apache2/mediawiki-access.log combined
        ServerSignature Off

</VirtualHost>
<VirtualHost *:443>
        ServerAdmin <%= scope.lookupvar("mediawiki::server_admin") %>
        ServerName <%= scope.lookupvar("mediawiki::site_hostname") %>
        ServerAlias <%= scope.lookupvar("mediawiki::site_hostname_alias") %>

        # turn on SSL
        SSLEngine on
        SSLProtocol All -SSLv2 -SSLv3
        SSLHonorCipherOrder On
        SSLCipherSuite EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH+aRSA+RC4:EECDH:EDH+aRSA:RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:+AES256-SHA256:AES256-SHA256:+RC4:RC4
        SSLCertificateFile      <%= scope.lookupvar("mediawiki::ssl_cert_file") %>
        SSLCertificateKeyFile   <%= scope.lookupvar("mediawiki::ssl_key_file") %>
        <% if scope.lookupvar("mediawiki::ssl_chain_file") != "" %>
        SSLCertificateChainFile <%= scope.lookupvar("mediawiki::ssl_chain_file") %>
        <% end %>

        # mitigate BREACH vulnerability
        SetOutputFilter DEFLATE
        BrowserMatch ^Mozilla/4 gzip-only-text/html
        BrowserMatch ^Mozilla/4\.0[678] no-gzip
        BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
        SetEnvIfNoCase Request_URI \.(?:gif|jpe?g|png|zip|gz|tgz|htc)$ no-gzip dont-vary
        SetEnvIfNoCase Referer .* self_referer=no
        SetEnvIfNoCase Referer ^https://<%= scope.lookupvar("mediawiki::site_hostname").gsub(/\./, '\.') %>/ self_referer=yes
        SetEnvIf self_referer ^no$ no-gzip
        Header append Vary User-Agent env=!dont-vary
        # if not running SSL on port 443 this needs adjustment
        SetEnvIfNoCase Referer ^https://<%= scope.lookupvar("mediawiki::site_hostname").gsub(/\./, '\.') %>:10443/ self_referer=yes

        # mitigate XSS
        Header unset ETag
        Header set Strict-Transport-Security "max-age=15768000; includeSubDomains"
        Header set X-Frame-Options: sameorigin
        Header set X-XSS-Protection: "1; mode=block"
        Header set X-Content-Type-Options: nosniff
        Header set X-WebKit-CSP: "default-src 'self'"
        Header set X-Permitted-Cross-Domain-Policies: "master-only"

        RedirectMatch ^/$ http://<%= scope.lookupvar("mediawiki::site_hostname") %>/wiki/

        DocumentRoot /var/www
        <Directory />
                Options FollowSymLinks
                AllowOverride None
        </Directory>
        <Directory /var/www/>
                Options Indexes FollowSymLinks MultiViews
                AllowOverride None
                Order allow,deny
                allow from all
        </Directory>
	    <Directory "<%= scope.lookupvar('mediawiki::mediawiki_images_location') %>">
		        # Ignore .htaccess files
		        AllowOverride None

		        # Serve HTML as plaintext, don't execute SHTML
		        AddType text/plain .html .htm .shtml .php

		        # Don't run arbitrary PHP code.
		        php_admin_flag engine off
	    </Directory>
        <Files README.txt>
            Order deny,allow
            Deny from all
        </Files>

	    <IfModule mod_expires.c>
		        ExpiresActive On
		        <Directory "<%= scope.lookupvar('mediawiki::mediawiki_location') %>">
			            <FilesMatch "\.(gif|jpe?g|png|css|js|woff|svg|eot|ttf)$">
				                ExpiresByType image/gif A2592000
				                ExpiresByType image/png A2592000
				                ExpiresByType image/jpeg A2592000
				                ExpiresByType text/css A2592000
				                ExpiresByType text/javascript A2592000
				                ExpiresByType application/x-javascript A2592000
				                ExpiresByType application/x-font-woff A2592000
				                ExpiresByType image/svg+xml A2592000
				                ExpiresByType application/vnd.ms-fontobject A2592000
				                ExpiresByType application/x-font-ttf A2592000
				                ## I think it's likely dangerous to enable this for the entire domain.
				                ## I'm nearly positive we only need to do so for the WebFonts.
				                ## For now I'm going to keep this disabled.
				                #Header add Access-Control-Allow-Origin "*"
                                Header set Cache-Control "public"
			            </FilesMatch>
		        </Directory>
	    </IfModule>

	    AddType application/x-font-woff .woff
	    AddType application/vnd.ms-fontobject .eot

	    # TTF doesn't have an official MIME type, but I really don't want to use application/octet-stream for it
	    AddType application/x-font-ttf .ttf

        Alias /w/images <%= scope.lookupvar('mediawiki::mediawiki_images_location') %>
        Alias /w <%= scope.lookupvar('mediawiki::mediawiki_location') %>
        #Alias /wiki <%= scope.lookupvar('mediawiki::mediawiki_location') %>/index.php
        Alias /wiki <%= scope.lookupvar('mediawiki::mediawiki_location') %>

        # Redirect old /Article_Name urls
        RewriteEngine on
        RewriteCond %{REQUEST_URI} !^/w/
        RewriteCond %{REQUEST_URI} !^/wiki/
        RewriteRule ^/(.*)$ https://<%= scope.lookupvar("mediawiki::site_hostname") %>/wiki/$1 [L,R]

        # Disable unused HTTP methods
        RewriteCond %{REQUEST_METHOD} !^(GET|POST|HEAD)
        RewriteRule .* - [R=405,L]

        ErrorLog /var/log/apache2/error.log

        # Possible values include: debug, info, notice, warn, error, crit,
        # alert, emerg.
        LogLevel warn

        CustomLog /var/log/apache2/access.log combined
        ServerSignature Off

</VirtualHost>
